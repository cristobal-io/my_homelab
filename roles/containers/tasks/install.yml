---
- name: Install Python and python3-pip
  package:
    name:
      - python3
      - python3-pip
    state: present

- name: Upgrade Python Docker SDK
  pip:
    name: docker
    state: latest

- name: Make sure that the docker folders exist
  ansible.builtin.file:
    path: "{{ item }}"
    owner: "{{ username }}"
    group: "{{ username }}"
    state: directory
  loop:
    - "{{ docker_compose_dir }}"
    - "{{ docker_dir }}"

- name: Include variables for each service
  include_vars:
    file: "{{ service_var_file }}"
  loop: "{{ services }}"
  loop_control:
    loop_var: service
  vars:
    service_var_file: "group_vars/{{ service }}.yml"

- name: Gather all volumes from services
  set_fact:
    all_volumes: "{{ all_volumes | default([]) + vars[service + '_volumes'] }}"
  loop: "{{ services }}"
  loop_control:
    loop_var: service

- name: Extract unique directories from volume mappings
  set_fact:
    all_directories: "{{ all_volumes | map('split', ':') | map('first') | unique }}"

- name: Ensure all collected directories exist with correct permissions
  ansible.builtin.file:
    path: "{{ item | regex_replace('{{ raid_dir }}', raid_dir) | regex_replace('{{ docker_dir }}', docker_dir) }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: '0775'
  loop: "{{ all_directories }}"

- name: Ensure networks variable is defined
  set_fact:
    networks: "{{ networks | default([]) }}"

- name: Set app_cidr and app_base for each service
  set_fact:
    app_cidr: "{{ (networks | selectattr('name', '==', service) | map(attribute='cidr') | first) | default('') }}"
    app_base: "{{ (networks | selectattr('name', '==', service) | map(attribute='base') | first) | default('') }}"
  loop: "{{ services }}"
  loop_control:
    loop_var: service

- name: Deploy base Docker Compose configuration
  template:
    src: "templates/base.yml"
    dest: "{{ docker_compose_dir }}/base.yml"
    owner: "{{ username }}"
    group: "{{ username }}"

- name: Deploy services using individual compose files
  template:
    src: "templates/{{ service }}.yml"
    dest: "{{ docker_compose_dir }}/{{ service }}.yml"
    owner: "{{ username }}"
    group: "{{ username }}"
  loop: "{{ services }}"
  loop_control:
    loop_var: service
    label: "{{ service }}"
  vars:
    app_cidr: "{{ app_cidr }}"
    app_base: "{{ app_base }}"

- name: Docker-compose up for each service
  community.docker.docker_compose_v2:
    project_src: "{{ docker_compose_dir }}"
    files:
      - "base.yml"
      - "{{ service }}.yml"
  loop: "{{ services }}"
  loop_control:
    loop_var: service
    label: "{{ service }}"
